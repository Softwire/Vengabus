// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectionStringConfigForm renders correctly 1`] = `
.emotion-10 {
  margin: 0 5px 0 0;
}

.emotion-10.btn {
  padding: 6px 13px;
}

.emotion-11 {
  margin: 0 0 0 5px;
}

.emotion-11.btn {
  padding: 6px 13px;
}

.emotion-15 {
  padding: 5px;
}

.emotion-9 {
  color: black;
}

.emotion-8 {
  position: relative;
  box-sizing: border-box;
}

.emotion-7 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,98%);
  border-color: hsl(0,0%,80%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-7:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 2px 8px;
  -webkit-overflow-scrolling: touch;
  position: relative;
  box-sizing: border-box;
}

.emotion-0 {
  color: #222;
  margin-left: 2px;
  margin-right: 2px;
  max-width: calc(100% - 8px);
  overflow: hidden;
  position: absolute;
  text-overflow: ellipsis;
  white-space: nowrap;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-1 {
  margin: 2px;
  padding-bottom: 2px;
  padding-top: 2px;
  visibility: visible;
  color: #222;
  box-sizing: border-box;
}

.emotion-6 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
}

.emotion-3 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,80%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-5 {
  color: hsl(0,0%,80%);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 8px;
  -webkit-transition: color 150ms;
  transition: color 150ms;
  box-sizing: border-box;
}

.emotion-5:hover {
  color: hsl(0,0%,60%);
}

.emotion-4 {
  display: inline-block;
  fill: currentColor;
  line-height: 1;
  stroke: currentColor;
  stroke-width: 0;
}

.emotion-12 {
  cursor: not-allowed;
  float: right;
}

.emotion-12 button {
  pointer-events: auto;
}

.emotion-14 {
  color: black;
  overflow-wrap: break-word;
  max-height: calc(100vh - 275px - 50px);
  overflow-y: auto;
}

.emotion-13 {
  background: #66b3ff;
}

<form
  className="emotion-15"
>
  <div
    className="form-group"
  >
    <label
      className="control-label"
      htmlFor="connectionStringLabel"
    >
      Select Existing/Create New String
    </label>
    <div
      className="emotion-8 emotion-9"
      id={undefined}
      onKeyDown={[Function]}
    >
      <div
        className="emotion-7"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className="emotion-2"
        >
          <div
            className="emotion-0"
          >
            
          </div>
          <div
            className="emotion-1"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                aria-label={undefined}
                aria-labelledby={undefined}
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                className={undefined}
                disabled={false}
                id="react-select-8-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className="emotion-6"
        >
          <span
            className="emotion-3"
          />
          <div
            aria-hidden="true"
            className="emotion-5"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              aria-hidden="true"
              className="emotion-4"
              focusable="false"
              height={20}
              viewBox="0 0 20 20"
              width={20}
            >
              <path
                d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="form-group has-error"
  >
    <label
      className="control-label"
      htmlFor="connectionString"
    >
      Connection String
    </label>
    <input
      className="form-control"
      id="connectionString"
      onChange={[Function]}
      placeholder="Enter Connection String"
      type="text"
      value=""
    />
  </div>
  <div
    className="form-group"
  >
    <label
      className="control-label"
      htmlFor="APILocationForm"
    >
      ServiceBus API Server String
    </label>
    <input
      className="form-control"
      id="APILocationForm"
      onChange={[Function]}
      placeholder="API Location, e.g. http://a.com:63591/"
      type="text"
      value="UnformattedAPIRootInLocalStorage"
    />
  </div>
  <button
    className="emotion-10 btn btn-default"
    disabled={false}
    id="connectButton"
    onClick={[Function]}
    type="button"
  >
    Connect
  </button>
  <div
    className="emotion-12"
    onBlur={[Function]}
    onClick={null}
    onFocus={[Function]}
    onMouseOut={[Function]}
    onMouseOver={[Function]}
  >
    <button
      className="emotion-11 btn btn-danger"
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Delete Connection
    </button>
  </div>
  <div>
    <br />
  </div>
  <div
    className="panel panel-default"
  >
    <div
      className="emotion-13 panel-heading"
    >
      Connection String
    </div>
    <div
      className="emotion-14 panel-body"
    >
      <div>
        Connected to:  
      </div>
      <div>
        Connection String:  
      </div>
    </div>
  </div>
</form>
`;
