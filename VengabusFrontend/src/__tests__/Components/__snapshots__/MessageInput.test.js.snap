// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Shows a red border around invalid property names 1`] = `
.emotion-92 {
  margin-left: 5px;
  margin-right: 5px;
  padding-top: 1%;
  width: calc(100% - 10px);
  float: left;
}

.emotion-2 {
  float: left;
  width: 20px;
  position: relative;
  top: 9px;
}

.emotion-4 {
  float: left;
  width: 75px;
}

.emotion-16 {
  float: left;
  width: 275px;
  text-align: left;
}

.emotion-43 {
  width: 270px;
  margin-left: 5px;
}

.emotion-0 {
  font-weight: bold;
  margin-left: 5px;
}

.emotion-1 {
  text-align: left;
}

.emotion-88 {
  min-height: 350px;
  padding-left: 5px;
}

.emotion-6 {
  line-height: 38px;
}

.emotion-20 {
  float: left;
  width: 100%;
}

.emotion-44 {
  opacity: 0.5;
}

.emotion-44:hover {
  cursor: progress;
}

.emotion-15 {
  position: relative;
  box-sizing: border-box;
}

.emotion-14 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,98%);
  border-color: hsl(0,0%,80%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-14:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 2px 8px;
  -webkit-overflow-scrolling: touch;
  position: relative;
  box-sizing: border-box;
}

.emotion-7 {
  color: hsl(0,0%,50%);
  margin-left: 2px;
  margin-right: 2px;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-8 {
  margin: 2px;
  padding-bottom: 2px;
  padding-top: 2px;
  visibility: visible;
  color: #222;
  box-sizing: border-box;
}

.emotion-13 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
}

.emotion-10 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,80%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-12 {
  color: hsl(0,0%,80%);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 8px;
  -webkit-transition: color 150ms;
  transition: color 150ms;
  box-sizing: border-box;
}

.emotion-12:hover {
  color: hsl(0,0%,60%);
}

.emotion-11 {
  display: inline-block;
  fill: currentColor;
  line-height: 1;
  stroke: currentColor;
  stroke-width: 0;
}

.emotion-34 {
  pointer-events: none;
  position: relative;
  box-sizing: border-box;
}

.emotion-33 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,95%);
  border-color: hsl(0,0%,90%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-33:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-29 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,90%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-53 {
  padding-left: 5px;
  width: 20%;
  float: left;
}

.emotion-57 {
  padding-left: 5px;
  width: calc(80% - 80px);
  float: left;
}

.emotion-60 {
  padding-left: 5px;
  width: 80px;
  float: left;
}

.emotion-50 {
  min-height: 38px;
}

<MessageInput>
  <div
    className="emotion-92"
  >
    <div
      className="emotion-1"
    >
      <p
        className="emotion-0"
      >
        Destination
      </p>
    </div>
    <div
      className="emotion-20"
    >
      <div
        onClick={[Function]}
      >
        <input
          checked={true}
          className="emotion-2"
          id="queue-selection-radio"
          onChange={[Function]}
          type="radio"
          value="queue"
        />
        <div
          className="emotion-1 emotion-4 emotion-0 emotion-6"
        >
          <p>
            Queue
          </p>
        </div>
      </div>
      <StateManager
        className="emotion-16"
        defaultInputValue=""
        defaultMenuIsOpen={false}
        defaultValue={null}
        id="queue-dropdown"
        isDisabled={false}
        onChange={[Function]}
        options={Array []}
        title="Queue"
      >
        <Select
          backspaceRemovesValue={true}
          blurInputOnSelect={true}
          captureMenuScroll={false}
          className="emotion-16"
          closeMenuOnScroll={false}
          closeMenuOnSelect={true}
          components={Object {}}
          controlShouldRenderValue={true}
          defaultInputValue=""
          defaultMenuIsOpen={false}
          defaultValue={null}
          escapeClearsValue={false}
          filterOption={[Function]}
          formatGroupLabel={[Function]}
          getOptionLabel={[Function]}
          getOptionValue={[Function]}
          id="queue-dropdown"
          inputValue=""
          isDisabled={false}
          isLoading={false}
          isMulti={false}
          isOptionDisabled={[Function]}
          isRtl={false}
          isSearchable={true}
          loadingMessage={[Function]}
          maxMenuHeight={300}
          menuIsOpen={false}
          menuPlacement="bottom"
          menuPosition="absolute"
          menuShouldBlockScroll={false}
          menuShouldScrollIntoView={true}
          minMenuHeight={140}
          noOptionsMessage={[Function]}
          onChange={[Function]}
          onInputChange={[Function]}
          onMenuClose={[Function]}
          onMenuOpen={[Function]}
          openMenuOnClick={true}
          openMenuOnFocus={false}
          options={Array []}
          pageSize={5}
          placeholder="Select..."
          screenReaderStatus={[Function]}
          styles={Object {}}
          tabIndex="0"
          tabSelectsValue={true}
          title="Queue"
          value={null}
        >
          <SelectContainer
            className="emotion-16"
            clearValue={[Function]}
            cx={[Function]}
            getStyles={[Function]}
            getValue={[Function]}
            hasValue={false}
            innerProps={
              Object {
                "id": "queue-dropdown",
                "onKeyDown": [Function],
              }
            }
            isDisabled={false}
            isFocused={false}
            isMulti={false}
            isRtl={false}
            options={Array []}
            selectOption={[Function]}
            selectProps={
              Object {
                "backspaceRemovesValue": true,
                "blurInputOnSelect": true,
                "captureMenuScroll": false,
                "className": "emotion-16",
                "closeMenuOnScroll": false,
                "closeMenuOnSelect": true,
                "components": Object {},
                "controlShouldRenderValue": true,
                "defaultInputValue": "",
                "defaultMenuIsOpen": false,
                "defaultValue": null,
                "escapeClearsValue": false,
                "filterOption": [Function],
                "formatGroupLabel": [Function],
                "getOptionLabel": [Function],
                "getOptionValue": [Function],
                "id": "queue-dropdown",
                "inputValue": "",
                "isDisabled": false,
                "isLoading": false,
                "isMulti": false,
                "isOptionDisabled": [Function],
                "isRtl": false,
                "isSearchable": true,
                "loadingMessage": [Function],
                "maxMenuHeight": 300,
                "menuIsOpen": false,
                "menuPlacement": "bottom",
                "menuPosition": "absolute",
                "menuShouldBlockScroll": false,
                "menuShouldScrollIntoView": true,
                "minMenuHeight": 140,
                "noOptionsMessage": [Function],
                "onChange": [Function],
                "onInputChange": [Function],
                "onMenuClose": [Function],
                "onMenuOpen": [Function],
                "openMenuOnClick": true,
                "openMenuOnFocus": false,
                "options": Array [],
                "pageSize": 5,
                "placeholder": "Select...",
                "screenReaderStatus": [Function],
                "styles": Object {},
                "tabIndex": "0",
                "tabSelectsValue": true,
                "title": "Queue",
                "value": null,
              }
            }
            setValue={[Function]}
          >
            <div
              className="emotion-15 emotion-16"
              id="queue-dropdown"
              onKeyDown={[Function]}
            >
              <Control
                clearValue={[Function]}
                cx={[Function]}
                getStyles={[Function]}
                getValue={[Function]}
                hasValue={false}
                innerProps={
                  Object {
                    "onMouseDown": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                innerRef={[Function]}
                isDisabled={false}
                isFocused={false}
                isMulti={false}
                isRtl={false}
                options={Array []}
                selectOption={[Function]}
                selectProps={
                  Object {
                    "backspaceRemovesValue": true,
                    "blurInputOnSelect": true,
                    "captureMenuScroll": false,
                    "className": "emotion-16",
                    "closeMenuOnScroll": false,
                    "closeMenuOnSelect": true,
                    "components": Object {},
                    "controlShouldRenderValue": true,
                    "defaultInputValue": "",
                    "defaultMenuIsOpen": false,
                    "defaultValue": null,
                    "escapeClearsValue": false,
                    "filterOption": [Function],
                    "formatGroupLabel": [Function],
                    "getOptionLabel": [Function],
                    "getOptionValue": [Function],
                    "id": "queue-dropdown",
                    "inputValue": "",
                    "isDisabled": false,
                    "isLoading": false,
                    "isMulti": false,
                    "isOptionDisabled": [Function],
                    "isRtl": false,
                    "isSearchable": true,
                    "loadingMessage": [Function],
                    "maxMenuHeight": 300,
                    "menuIsOpen": false,
                    "menuPlacement": "bottom",
                    "menuPosition": "absolute",
                    "menuShouldBlockScroll": false,
                    "menuShouldScrollIntoView": true,
                    "minMenuHeight": 140,
                    "noOptionsMessage": [Function],
                    "onChange": [Function],
                    "onInputChange": [Function],
                    "onMenuClose": [Function],
                    "onMenuOpen": [Function],
                    "openMenuOnClick": true,
                    "openMenuOnFocus": false,
                    "options": Array [],
                    "pageSize": 5,
                    "placeholder": "Select...",
                    "screenReaderStatus": [Function],
                    "styles": Object {},
                    "tabIndex": "0",
                    "tabSelectsValue": true,
                    "title": "Queue",
                    "value": null,
                  }
                }
                setValue={[Function]}
              >
                <div
                  className="emotion-14"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                >
                  <ValueContainer
                    clearValue={[Function]}
                    cx={[Function]}
                    getStyles={[Function]}
                    getValue={[Function]}
                    hasValue={false}
                    isDisabled={false}
                    isMulti={false}
                    isRtl={false}
                    options={Array []}
                    selectOption={[Function]}
                    selectProps={
                      Object {
                        "backspaceRemovesValue": true,
                        "blurInputOnSelect": true,
                        "captureMenuScroll": false,
                        "className": "emotion-16",
                        "closeMenuOnScroll": false,
                        "closeMenuOnSelect": true,
                        "components": Object {},
                        "controlShouldRenderValue": true,
                        "defaultInputValue": "",
                        "defaultMenuIsOpen": false,
                        "defaultValue": null,
                        "escapeClearsValue": false,
                        "filterOption": [Function],
                        "formatGroupLabel": [Function],
                        "getOptionLabel": [Function],
                        "getOptionValue": [Function],
                        "id": "queue-dropdown",
                        "inputValue": "",
                        "isDisabled": false,
                        "isLoading": false,
                        "isMulti": false,
                        "isOptionDisabled": [Function],
                        "isRtl": false,
                        "isSearchable": true,
                        "loadingMessage": [Function],
                        "maxMenuHeight": 300,
                        "menuIsOpen": false,
                        "menuPlacement": "bottom",
                        "menuPosition": "absolute",
                        "menuShouldBlockScroll": false,
                        "menuShouldScrollIntoView": true,
                        "minMenuHeight": 140,
                        "noOptionsMessage": [Function],
                        "onChange": [Function],
                        "onInputChange": [Function],
                        "onMenuClose": [Function],
                        "onMenuOpen": [Function],
                        "openMenuOnClick": true,
                        "openMenuOnFocus": false,
                        "options": Array [],
                        "pageSize": 5,
                        "placeholder": "Select...",
                        "screenReaderStatus": [Function],
                        "styles": Object {},
                        "tabIndex": "0",
                        "tabSelectsValue": true,
                        "title": "Queue",
                        "value": null,
                      }
                    }
                    setValue={[Function]}
                  >
                    <div
                      className="emotion-9"
                    >
                      <Placeholder
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        isDisabled={false}
                        isMulti={false}
                        isRtl={false}
                        key="placeholder"
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "queue-dropdown",
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Queue",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          className="emotion-7"
                        >
                          Select...
                        </div>
                      </Placeholder>
                      <Input
                        aria-autocomplete="list"
                        autoCapitalize="none"
                        autoComplete="off"
                        autoCorrect="off"
                        cx={[Function]}
                        getStyles={[Function]}
                        id="react-select-8-input"
                        innerRef={[Function]}
                        isDisabled={false}
                        isHidden={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        spellCheck="false"
                        tabIndex="0"
                        type="text"
                        value=""
                      >
                        <div
                          className="emotion-8"
                        >
                          <AutosizeInput
                            aria-autocomplete="list"
                            autoCapitalize="none"
                            autoComplete="off"
                            autoCorrect="off"
                            className=""
                            disabled={false}
                            id="react-select-8-input"
                            injectStyles={true}
                            inputRef={[Function]}
                            inputStyle={
                              Object {
                                "background": 0,
                                "border": 0,
                                "color": "inherit",
                                "fontSize": "inherit",
                                "opacity": 1,
                                "outline": 0,
                                "padding": 0,
                              }
                            }
                            minWidth={1}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            spellCheck="false"
                            tabIndex="0"
                            type="text"
                            value=""
                          >
                            <div
                              className=""
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <input
                                aria-autocomplete="list"
                                autoCapitalize="none"
                                autoComplete="off"
                                autoCorrect="off"
                                disabled={false}
                                id="react-select-8-input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                spellCheck="false"
                                style={
                                  Object {
                                    "background": 0,
                                    "border": 0,
                                    "boxSizing": "content-box",
                                    "color": "inherit",
                                    "fontSize": "inherit",
                                    "opacity": 1,
                                    "outline": 0,
                                    "padding": 0,
                                    "width": "2px",
                                  }
                                }
                                tabIndex="0"
                                type="text"
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </AutosizeInput>
                        </div>
                      </Input>
                    </div>
                  </ValueContainer>
                  <IndicatorsContainer
                    clearValue={[Function]}
                    cx={[Function]}
                    getStyles={[Function]}
                    getValue={[Function]}
                    hasValue={false}
                    isDisabled={false}
                    isMulti={false}
                    isRtl={false}
                    options={Array []}
                    selectOption={[Function]}
                    selectProps={
                      Object {
                        "backspaceRemovesValue": true,
                        "blurInputOnSelect": true,
                        "captureMenuScroll": false,
                        "className": "emotion-16",
                        "closeMenuOnScroll": false,
                        "closeMenuOnSelect": true,
                        "components": Object {},
                        "controlShouldRenderValue": true,
                        "defaultInputValue": "",
                        "defaultMenuIsOpen": false,
                        "defaultValue": null,
                        "escapeClearsValue": false,
                        "filterOption": [Function],
                        "formatGroupLabel": [Function],
                        "getOptionLabel": [Function],
                        "getOptionValue": [Function],
                        "id": "queue-dropdown",
                        "inputValue": "",
                        "isDisabled": false,
                        "isLoading": false,
                        "isMulti": false,
                        "isOptionDisabled": [Function],
                        "isRtl": false,
                        "isSearchable": true,
                        "loadingMessage": [Function],
                        "maxMenuHeight": 300,
                        "menuIsOpen": false,
                        "menuPlacement": "bottom",
                        "menuPosition": "absolute",
                        "menuShouldBlockScroll": false,
                        "menuShouldScrollIntoView": true,
                        "minMenuHeight": 140,
                        "noOptionsMessage": [Function],
                        "onChange": [Function],
                        "onInputChange": [Function],
                        "onMenuClose": [Function],
                        "onMenuOpen": [Function],
                        "openMenuOnClick": true,
                        "openMenuOnFocus": false,
                        "options": Array [],
                        "pageSize": 5,
                        "placeholder": "Select...",
                        "screenReaderStatus": [Function],
                        "styles": Object {},
                        "tabIndex": "0",
                        "tabSelectsValue": true,
                        "title": "Queue",
                        "value": null,
                      }
                    }
                    setValue={[Function]}
                  >
                    <div
                      className="emotion-13"
                    >
                      <IndicatorSeparator
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        isDisabled={false}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "queue-dropdown",
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Queue",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <span
                          className="emotion-10"
                        />
                      </IndicatorSeparator>
                      <DropdownIndicator
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        innerProps={
                          Object {
                            "aria-hidden": "true",
                            "onMouseDown": [Function],
                            "onTouchEnd": [Function],
                          }
                        }
                        isDisabled={false}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "queue-dropdown",
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Queue",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          aria-hidden="true"
                          className="emotion-12"
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                        >
                          <DownChevron>
                            <Svg
                              size={20}
                            >
                              <svg
                                aria-hidden="true"
                                className="emotion-11"
                                focusable="false"
                                height={20}
                                viewBox="0 0 20 20"
                                width={20}
                              >
                                <path
                                  d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                />
                              </svg>
                            </Svg>
                          </DownChevron>
                        </div>
                      </DropdownIndicator>
                    </div>
                  </IndicatorsContainer>
                </div>
              </Control>
            </div>
          </SelectContainer>
        </Select>
      </StateManager>
    </div>
    <div
      className="emotion-20"
    >
      <div
        onClick={[Function]}
      >
        <input
          checked={false}
          className="emotion-2"
          id="topic-selection-radio"
          onChange={[Function]}
          type="radio"
          value="topic"
        />
        <div
          className="emotion-1 emotion-4 emotion-0 emotion-6"
        >
          <p>
            Topic
          </p>
        </div>
      </div>
      <StateManager
        className="emotion-16"
        defaultInputValue=""
        defaultMenuIsOpen={false}
        defaultValue={null}
        id="topic-dropdown"
        isDisabled={true}
        onChange={[Function]}
        options={Array []}
        title="Topic"
      >
        <Select
          backspaceRemovesValue={true}
          blurInputOnSelect={true}
          captureMenuScroll={false}
          className="emotion-16"
          closeMenuOnScroll={false}
          closeMenuOnSelect={true}
          components={Object {}}
          controlShouldRenderValue={true}
          defaultInputValue=""
          defaultMenuIsOpen={false}
          defaultValue={null}
          escapeClearsValue={false}
          filterOption={[Function]}
          formatGroupLabel={[Function]}
          getOptionLabel={[Function]}
          getOptionValue={[Function]}
          id="topic-dropdown"
          inputValue=""
          isDisabled={true}
          isLoading={false}
          isMulti={false}
          isOptionDisabled={[Function]}
          isRtl={false}
          isSearchable={true}
          loadingMessage={[Function]}
          maxMenuHeight={300}
          menuIsOpen={false}
          menuPlacement="bottom"
          menuPosition="absolute"
          menuShouldBlockScroll={false}
          menuShouldScrollIntoView={true}
          minMenuHeight={140}
          noOptionsMessage={[Function]}
          onChange={[Function]}
          onInputChange={[Function]}
          onMenuClose={[Function]}
          onMenuOpen={[Function]}
          openMenuOnClick={true}
          openMenuOnFocus={false}
          options={Array []}
          pageSize={5}
          placeholder="Select..."
          screenReaderStatus={[Function]}
          styles={Object {}}
          tabIndex="0"
          tabSelectsValue={true}
          title="Topic"
          value={null}
        >
          <SelectContainer
            className="emotion-16"
            clearValue={[Function]}
            cx={[Function]}
            getStyles={[Function]}
            getValue={[Function]}
            hasValue={false}
            innerProps={
              Object {
                "id": "topic-dropdown",
                "onKeyDown": [Function],
              }
            }
            isDisabled={true}
            isFocused={false}
            isMulti={false}
            isRtl={false}
            options={Array []}
            selectOption={[Function]}
            selectProps={
              Object {
                "backspaceRemovesValue": true,
                "blurInputOnSelect": true,
                "captureMenuScroll": false,
                "className": "emotion-16",
                "closeMenuOnScroll": false,
                "closeMenuOnSelect": true,
                "components": Object {},
                "controlShouldRenderValue": true,
                "defaultInputValue": "",
                "defaultMenuIsOpen": false,
                "defaultValue": null,
                "escapeClearsValue": false,
                "filterOption": [Function],
                "formatGroupLabel": [Function],
                "getOptionLabel": [Function],
                "getOptionValue": [Function],
                "id": "topic-dropdown",
                "inputValue": "",
                "isDisabled": true,
                "isLoading": false,
                "isMulti": false,
                "isOptionDisabled": [Function],
                "isRtl": false,
                "isSearchable": true,
                "loadingMessage": [Function],
                "maxMenuHeight": 300,
                "menuIsOpen": false,
                "menuPlacement": "bottom",
                "menuPosition": "absolute",
                "menuShouldBlockScroll": false,
                "menuShouldScrollIntoView": true,
                "minMenuHeight": 140,
                "noOptionsMessage": [Function],
                "onChange": [Function],
                "onInputChange": [Function],
                "onMenuClose": [Function],
                "onMenuOpen": [Function],
                "openMenuOnClick": true,
                "openMenuOnFocus": false,
                "options": Array [],
                "pageSize": 5,
                "placeholder": "Select...",
                "screenReaderStatus": [Function],
                "styles": Object {},
                "tabIndex": "0",
                "tabSelectsValue": true,
                "title": "Topic",
                "value": null,
              }
            }
            setValue={[Function]}
          >
            <div
              className="emotion-34 emotion-16"
              id="topic-dropdown"
              onKeyDown={[Function]}
            >
              <Control
                clearValue={[Function]}
                cx={[Function]}
                getStyles={[Function]}
                getValue={[Function]}
                hasValue={false}
                innerProps={
                  Object {
                    "onMouseDown": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                innerRef={[Function]}
                isDisabled={true}
                isFocused={false}
                isMulti={false}
                isRtl={false}
                options={Array []}
                selectOption={[Function]}
                selectProps={
                  Object {
                    "backspaceRemovesValue": true,
                    "blurInputOnSelect": true,
                    "captureMenuScroll": false,
                    "className": "emotion-16",
                    "closeMenuOnScroll": false,
                    "closeMenuOnSelect": true,
                    "components": Object {},
                    "controlShouldRenderValue": true,
                    "defaultInputValue": "",
                    "defaultMenuIsOpen": false,
                    "defaultValue": null,
                    "escapeClearsValue": false,
                    "filterOption": [Function],
                    "formatGroupLabel": [Function],
                    "getOptionLabel": [Function],
                    "getOptionValue": [Function],
                    "id": "topic-dropdown",
                    "inputValue": "",
                    "isDisabled": true,
                    "isLoading": false,
                    "isMulti": false,
                    "isOptionDisabled": [Function],
                    "isRtl": false,
                    "isSearchable": true,
                    "loadingMessage": [Function],
                    "maxMenuHeight": 300,
                    "menuIsOpen": false,
                    "menuPlacement": "bottom",
                    "menuPosition": "absolute",
                    "menuShouldBlockScroll": false,
                    "menuShouldScrollIntoView": true,
                    "minMenuHeight": 140,
                    "noOptionsMessage": [Function],
                    "onChange": [Function],
                    "onInputChange": [Function],
                    "onMenuClose": [Function],
                    "onMenuOpen": [Function],
                    "openMenuOnClick": true,
                    "openMenuOnFocus": false,
                    "options": Array [],
                    "pageSize": 5,
                    "placeholder": "Select...",
                    "screenReaderStatus": [Function],
                    "styles": Object {},
                    "tabIndex": "0",
                    "tabSelectsValue": true,
                    "title": "Topic",
                    "value": null,
                  }
                }
                setValue={[Function]}
              >
                <div
                  className="emotion-33"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                >
                  <ValueContainer
                    clearValue={[Function]}
                    cx={[Function]}
                    getStyles={[Function]}
                    getValue={[Function]}
                    hasValue={false}
                    isDisabled={true}
                    isMulti={false}
                    isRtl={false}
                    options={Array []}
                    selectOption={[Function]}
                    selectProps={
                      Object {
                        "backspaceRemovesValue": true,
                        "blurInputOnSelect": true,
                        "captureMenuScroll": false,
                        "className": "emotion-16",
                        "closeMenuOnScroll": false,
                        "closeMenuOnSelect": true,
                        "components": Object {},
                        "controlShouldRenderValue": true,
                        "defaultInputValue": "",
                        "defaultMenuIsOpen": false,
                        "defaultValue": null,
                        "escapeClearsValue": false,
                        "filterOption": [Function],
                        "formatGroupLabel": [Function],
                        "getOptionLabel": [Function],
                        "getOptionValue": [Function],
                        "id": "topic-dropdown",
                        "inputValue": "",
                        "isDisabled": true,
                        "isLoading": false,
                        "isMulti": false,
                        "isOptionDisabled": [Function],
                        "isRtl": false,
                        "isSearchable": true,
                        "loadingMessage": [Function],
                        "maxMenuHeight": 300,
                        "menuIsOpen": false,
                        "menuPlacement": "bottom",
                        "menuPosition": "absolute",
                        "menuShouldBlockScroll": false,
                        "menuShouldScrollIntoView": true,
                        "minMenuHeight": 140,
                        "noOptionsMessage": [Function],
                        "onChange": [Function],
                        "onInputChange": [Function],
                        "onMenuClose": [Function],
                        "onMenuOpen": [Function],
                        "openMenuOnClick": true,
                        "openMenuOnFocus": false,
                        "options": Array [],
                        "pageSize": 5,
                        "placeholder": "Select...",
                        "screenReaderStatus": [Function],
                        "styles": Object {},
                        "tabIndex": "0",
                        "tabSelectsValue": true,
                        "title": "Topic",
                        "value": null,
                      }
                    }
                    setValue={[Function]}
                  >
                    <div
                      className="emotion-9"
                    >
                      <Placeholder
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        isDisabled={true}
                        isMulti={false}
                        isRtl={false}
                        key="placeholder"
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "topic-dropdown",
                            "inputValue": "",
                            "isDisabled": true,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Topic",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          className="emotion-7"
                        >
                          Select...
                        </div>
                      </Placeholder>
                      <Input
                        aria-autocomplete="list"
                        autoCapitalize="none"
                        autoComplete="off"
                        autoCorrect="off"
                        cx={[Function]}
                        getStyles={[Function]}
                        id="react-select-9-input"
                        innerRef={[Function]}
                        isDisabled={true}
                        isHidden={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        spellCheck="false"
                        tabIndex="0"
                        type="text"
                        value=""
                      >
                        <div
                          className="emotion-8"
                        >
                          <AutosizeInput
                            aria-autocomplete="list"
                            autoCapitalize="none"
                            autoComplete="off"
                            autoCorrect="off"
                            className=""
                            disabled={true}
                            id="react-select-9-input"
                            injectStyles={true}
                            inputRef={[Function]}
                            inputStyle={
                              Object {
                                "background": 0,
                                "border": 0,
                                "color": "inherit",
                                "fontSize": "inherit",
                                "opacity": 1,
                                "outline": 0,
                                "padding": 0,
                              }
                            }
                            minWidth={1}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            spellCheck="false"
                            tabIndex="0"
                            type="text"
                            value=""
                          >
                            <div
                              className=""
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <input
                                aria-autocomplete="list"
                                autoCapitalize="none"
                                autoComplete="off"
                                autoCorrect="off"
                                disabled={true}
                                id="react-select-9-input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                spellCheck="false"
                                style={
                                  Object {
                                    "background": 0,
                                    "border": 0,
                                    "boxSizing": "content-box",
                                    "color": "inherit",
                                    "fontSize": "inherit",
                                    "opacity": 1,
                                    "outline": 0,
                                    "padding": 0,
                                    "width": "2px",
                                  }
                                }
                                tabIndex="0"
                                type="text"
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </AutosizeInput>
                        </div>
                      </Input>
                    </div>
                  </ValueContainer>
                  <IndicatorsContainer
                    clearValue={[Function]}
                    cx={[Function]}
                    getStyles={[Function]}
                    getValue={[Function]}
                    hasValue={false}
                    isDisabled={true}
                    isMulti={false}
                    isRtl={false}
                    options={Array []}
                    selectOption={[Function]}
                    selectProps={
                      Object {
                        "backspaceRemovesValue": true,
                        "blurInputOnSelect": true,
                        "captureMenuScroll": false,
                        "className": "emotion-16",
                        "closeMenuOnScroll": false,
                        "closeMenuOnSelect": true,
                        "components": Object {},
                        "controlShouldRenderValue": true,
                        "defaultInputValue": "",
                        "defaultMenuIsOpen": false,
                        "defaultValue": null,
                        "escapeClearsValue": false,
                        "filterOption": [Function],
                        "formatGroupLabel": [Function],
                        "getOptionLabel": [Function],
                        "getOptionValue": [Function],
                        "id": "topic-dropdown",
                        "inputValue": "",
                        "isDisabled": true,
                        "isLoading": false,
                        "isMulti": false,
                        "isOptionDisabled": [Function],
                        "isRtl": false,
                        "isSearchable": true,
                        "loadingMessage": [Function],
                        "maxMenuHeight": 300,
                        "menuIsOpen": false,
                        "menuPlacement": "bottom",
                        "menuPosition": "absolute",
                        "menuShouldBlockScroll": false,
                        "menuShouldScrollIntoView": true,
                        "minMenuHeight": 140,
                        "noOptionsMessage": [Function],
                        "onChange": [Function],
                        "onInputChange": [Function],
                        "onMenuClose": [Function],
                        "onMenuOpen": [Function],
                        "openMenuOnClick": true,
                        "openMenuOnFocus": false,
                        "options": Array [],
                        "pageSize": 5,
                        "placeholder": "Select...",
                        "screenReaderStatus": [Function],
                        "styles": Object {},
                        "tabIndex": "0",
                        "tabSelectsValue": true,
                        "title": "Topic",
                        "value": null,
                      }
                    }
                    setValue={[Function]}
                  >
                    <div
                      className="emotion-13"
                    >
                      <IndicatorSeparator
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        isDisabled={true}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "topic-dropdown",
                            "inputValue": "",
                            "isDisabled": true,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Topic",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <span
                          className="emotion-29"
                        />
                      </IndicatorSeparator>
                      <DropdownIndicator
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={false}
                        innerProps={
                          Object {
                            "aria-hidden": "true",
                            "onMouseDown": [Function],
                            "onTouchEnd": [Function],
                          }
                        }
                        isDisabled={true}
                        isFocused={false}
                        isMulti={false}
                        isRtl={false}
                        options={Array []}
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "emotion-16",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "id": "topic-dropdown",
                            "inputValue": "",
                            "isDisabled": true,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": true,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 300,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "styles": Object {},
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "title": "Topic",
                            "value": null,
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          aria-hidden="true"
                          className="emotion-12"
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                        >
                          <DownChevron>
                            <Svg
                              size={20}
                            >
                              <svg
                                aria-hidden="true"
                                className="emotion-11"
                                focusable="false"
                                height={20}
                                viewBox="0 0 20 20"
                                width={20}
                              >
                                <path
                                  d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                />
                              </svg>
                            </Svg>
                          </DownChevron>
                        </div>
                      </DropdownIndicator>
                    </div>
                  </IndicatorsContainer>
                </div>
              </Control>
            </div>
          </SelectContainer>
        </Select>
      </StateManager>
    </div>
    <hr
      className="emotion-20"
    />
    <div
      className="emotion-1"
    >
      <p
        className="emotion-0"
      >
        Pre-defined Properties
      </p>
    </div>
    <MessagePropertyInput
      deleteRow={[Function]}
      handlePropertyNameChange={[Function]}
      handlePropertyValueChange={[Function]}
      permittedValues={Array []}
      properties={Array []}
    >
      <div />
    </MessagePropertyInput>
    <form>
      <div
        className="emotion-1"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          className="emotion-43 emotion-44"
          disabled={false}
          onClick={[Function]}
        >
          <button
            className="emotion-43 emotion-44 btn btn-default"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Loading pre-defined properties...
          </button>
        </Button>
      </div>
    </form>
    <hr />
    <div
      className="emotion-1"
    >
      <p
        className="emotion-0"
      >
        User-defined Properties
      </p>
    </div>
    <MessagePropertyInput
      deleteRow={[Function]}
      handlePropertyNameChange={[Function]}
      handlePropertyValueChange={[Function]}
      properties={
        Array [
          Object {
            "name": "test1",
            "value": "any value 1",
          },
          Object {
            "name": "test2",
            "value": "any value 2",
          },
          Object {
            "name": "test2",
            "value": "any value 3",
          },
        ]
      }
      reservedPropertyNames={Array []}
    >
      <div>
        <MessagePropertyInputRow
          deleteRow={[Function]}
          handlePropertyNameChange={[Function]}
          handlePropertyValueChange={[Function]}
          index={0}
          isPropertyNameValid={[Function]}
          key="0"
          propertyName="test1"
          propertyValue="any value 1"
        >
          <div>
            <form
              className="emotion-53"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="0"
                onChange={[Function]}
                placeholder="Enter property name"
                type="text"
                validation={null}
                value="test1"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                  validationState={null}
                >
                  <div
                    className="form-group"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property name"
                      type="text"
                      value="test1"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property name"
                        type="text"
                        value="test1"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <form
              className="emotion-57"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="0"
                onChange={[Function]}
                placeholder="Enter property value"
                type="text"
                value="any value 1"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                >
                  <div
                    className="form-group"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property value"
                      type="text"
                      value="any value 1"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property value"
                        type="text"
                        value="any value 1"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <div
              className="emotion-60"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="danger"
                className="emotion-50"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  className="emotion-50 btn btn-danger"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  Delete
                </button>
              </Button>
            </div>
          </div>
        </MessagePropertyInputRow>
        <MessagePropertyInputRow
          deleteRow={[Function]}
          handlePropertyNameChange={[Function]}
          handlePropertyValueChange={[Function]}
          index={1}
          isPropertyNameValid={[Function]}
          key="1"
          propertyName="test2"
          propertyValue="any value 2"
        >
          <div>
            <form
              className="emotion-53"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="1"
                onChange={[Function]}
                placeholder="Enter property name"
                type="text"
                validation="error"
                value="test2"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                  validationState="error"
                >
                  <div
                    className="form-group has-error"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property name"
                      type="text"
                      value="test2"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property name"
                        type="text"
                        value="test2"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <form
              className="emotion-57"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="1"
                onChange={[Function]}
                placeholder="Enter property value"
                type="text"
                value="any value 2"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                >
                  <div
                    className="form-group"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property value"
                      type="text"
                      value="any value 2"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property value"
                        type="text"
                        value="any value 2"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <div
              className="emotion-60"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="danger"
                className="emotion-50"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  className="emotion-50 btn btn-danger"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  Delete
                </button>
              </Button>
            </div>
          </div>
        </MessagePropertyInputRow>
        <MessagePropertyInputRow
          deleteRow={[Function]}
          handlePropertyNameChange={[Function]}
          handlePropertyValueChange={[Function]}
          index={2}
          isPropertyNameValid={[Function]}
          key="2"
          propertyName="test2"
          propertyValue="any value 3"
        >
          <div>
            <form
              className="emotion-53"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="2"
                onChange={[Function]}
                placeholder="Enter property name"
                type="text"
                validation="error"
                value="test2"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                  validationState="error"
                >
                  <div
                    className="form-group has-error"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property name"
                      type="text"
                      value="test2"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property name"
                        type="text"
                        value="test2"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <form
              className="emotion-57"
              onSubmit={[Function]}
            >
              <FieldGroup
                className="emotion-50"
                id="formControlsText"
                key="2"
                onChange={[Function]}
                placeholder="Enter property value"
                type="text"
                value="any value 3"
              >
                <FormGroup
                  bsClass="form-group"
                  controlId="formControlsText"
                >
                  <div
                    className="form-group"
                  >
                    <FormControl
                      bsClass="form-control"
                      className="emotion-50"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter property value"
                      type="text"
                      value="any value 3"
                    >
                      <input
                        className="emotion-50 form-control"
                        id="formControlsText"
                        onChange={[Function]}
                        placeholder="Enter property value"
                        type="text"
                        value="any value 3"
                      />
                    </FormControl>
                  </div>
                </FormGroup>
              </FieldGroup>
            </form>
            <div
              className="emotion-60"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="danger"
                className="emotion-50"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  className="emotion-50 btn btn-danger"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  Delete
                </button>
              </Button>
            </div>
          </div>
        </MessagePropertyInputRow>
      </div>
    </MessagePropertyInput>
    <form>
      <div
        className="emotion-1"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          className="emotion-43"
          disabled={false}
          onClick={[Function]}
        >
          <button
            className="emotion-43 btn btn-default"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Add new application specific property
          </button>
        </Button>
      </div>
    </form>
    <hr />
    <form>
      <FormGroup
        bsClass="form-group"
        className="emotion-1"
        controlId="formControlsMessageBodyText"
      >
        <div
          className="emotion-1 form-group"
        >
          <ControlLabel
            bsClass="control-label"
            className="emotion-0"
            srOnly={false}
          >
            <label
              className="emotion-0 control-label"
              htmlFor="formControlsMessageBodyText"
            >
              Body
            </label>
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            className="emotion-88"
            componentClass="textarea"
            onChange={[Function]}
            placeholder="Enter message body"
            value=""
          >
            <textarea
              className="emotion-88 form-control"
              id="formControlsMessageBodyText"
              onChange={[Function]}
              placeholder="Enter message body"
              value=""
            />
          </FormControl>
        </div>
      </FormGroup>
    </form>
    <form>
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="default"
        disabled={false}
        id="submitButton"
        onClick={[Function]}
      >
        <button
          className="btn btn-default"
          disabled={false}
          id="submitButton"
          onClick={[Function]}
          type="button"
        >
          Submit
        </button>
      </Button>
      <ButtonWithConfirmationModal
        buttonText="Reset Fields"
        confirmAction={[Function]}
        confirmButtonText="Reset"
        modalBody={
          <Unknown>
            <p>
              Are you sure you want to reset ALL fields of the current message?
            </p>
            <p>
              Note: if you are replaying an existing message, resetting the fields here will have NO effect on the orignal message.
            </p>
          </Unknown>
        }
        modalTitle="Reset all fields"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="danger"
          disabled={false}
          onClick={[Function]}
        >
          <button
            className="btn btn-danger"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Reset Fields
          </button>
        </Button>
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <Modal
            autoFocus={true}
            backdrop={true}
            backdropClassName="modal-backdrop"
            backdropTransition={[Function]}
            containerClassName="modal-open"
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
            transition={[Function]}
          />
        </Modal>
      </ButtonWithConfirmationModal>
    </form>
  </div>
</MessageInput>
`;

exports[`renders correctly 1`] = `
.emotion-47 {
  margin-left: 5px;
  margin-right: 5px;
  padding-top: 1%;
  width: calc(100% - 10px);
  float: left;
}

.emotion-2 {
  float: left;
  width: 20px;
  position: relative;
  top: 9px;
}

.emotion-4 {
  float: left;
  width: 75px;
}

.emotion-16 {
  float: left;
  width: 275px;
  text-align: left;
}

.emotion-37 {
  width: 270px;
  margin-left: 5px;
}

.emotion-0 {
  font-weight: bold;
  margin-left: 5px;
}

.emotion-1 {
  text-align: left;
}

.emotion-45 {
  min-height: 350px;
  padding-left: 5px;
}

.emotion-6 {
  line-height: 38px;
}

.emotion-17 {
  float: left;
  width: 100%;
}

.emotion-38 {
  opacity: 0.5;
}

.emotion-38:hover {
  cursor: progress;
}

.emotion-15 {
  position: relative;
  box-sizing: border-box;
}

.emotion-14 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,98%);
  border-color: hsl(0,0%,80%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-14:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 2px 8px;
  -webkit-overflow-scrolling: touch;
  position: relative;
  box-sizing: border-box;
}

.emotion-7 {
  color: hsl(0,0%,50%);
  margin-left: 2px;
  margin-right: 2px;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-8 {
  margin: 2px;
  padding-bottom: 2px;
  padding-top: 2px;
  visibility: visible;
  color: #222;
  box-sizing: border-box;
}

.emotion-13 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
}

.emotion-10 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,80%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-12 {
  color: hsl(0,0%,80%);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 8px;
  -webkit-transition: color 150ms;
  transition: color 150ms;
  box-sizing: border-box;
}

.emotion-12:hover {
  color: hsl(0,0%,60%);
}

.emotion-11 {
  display: inline-block;
  fill: currentColor;
  line-height: 1;
  stroke: currentColor;
  stroke-width: 0;
}

.emotion-31 {
  pointer-events: none;
  position: relative;
  box-sizing: border-box;
}

.emotion-30 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,95%);
  border-color: hsl(0,0%,90%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-30:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-26 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,90%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

<div
  className="emotion-47"
>
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      Destination
    </p>
  </div>
  <div
    className="emotion-17"
  >
    <div
      onClick={[Function]}
    >
      <input
        checked={true}
        className="emotion-2"
        id="queue-selection-radio"
        onChange={[Function]}
        type="radio"
        value="queue"
      />
      <div
        className="emotion-1 emotion-4 emotion-0 emotion-6"
      >
        <p>
          Queue
        </p>
      </div>
    </div>
    <div
      className="emotion-15 emotion-16"
      id="queue-dropdown"
      onKeyDown={[Function]}
    >
      <div
        className="emotion-14"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className="emotion-9"
        >
          <div
            className="emotion-7"
          >
            Select...
          </div>
          <div
            className="emotion-8"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                aria-label={undefined}
                aria-labelledby={undefined}
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                className={undefined}
                disabled={false}
                id="react-select-2-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className="emotion-13"
        >
          <span
            className="emotion-10"
          />
          <div
            aria-hidden="true"
            className="emotion-12"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              aria-hidden="true"
              className="emotion-11"
              focusable="false"
              height={20}
              viewBox="0 0 20 20"
              width={20}
            >
              <path
                d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="emotion-17"
  >
    <div
      onClick={[Function]}
    >
      <input
        checked={false}
        className="emotion-2"
        id="topic-selection-radio"
        onChange={[Function]}
        type="radio"
        value="topic"
      />
      <div
        className="emotion-1 emotion-4 emotion-0 emotion-6"
      >
        <p>
          Topic
        </p>
      </div>
    </div>
    <div
      className="emotion-31 emotion-16"
      id="topic-dropdown"
      onKeyDown={[Function]}
    >
      <div
        className="emotion-30"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className="emotion-9"
        >
          <div
            className="emotion-7"
          >
            Select...
          </div>
          <div
            className="emotion-8"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                aria-label={undefined}
                aria-labelledby={undefined}
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                className={undefined}
                disabled={true}
                id="react-select-3-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className="emotion-13"
        >
          <span
            className="emotion-26"
          />
          <div
            aria-hidden="true"
            className="emotion-12"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              aria-hidden="true"
              className="emotion-11"
              focusable="false"
              height={20}
              viewBox="0 0 20 20"
              width={20}
            >
              <path
                d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  <hr
    className="emotion-17"
  />
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      Pre-defined Properties
    </p>
  </div>
  <div />
  <form>
    <div
      className="emotion-1"
    >
      <button
        className="emotion-37 emotion-38 btn btn-default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Loading pre-defined properties...
      </button>
    </div>
  </form>
  <hr />
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      User-defined Properties
    </p>
  </div>
  <div />
  <form>
    <div
      className="emotion-1"
    >
      <button
        className="emotion-37 btn btn-default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Add new application specific property
      </button>
    </div>
  </form>
  <hr />
  <form>
    <div
      className="emotion-1 form-group"
    >
      <label
        className="emotion-0 control-label"
        htmlFor="formControlsMessageBodyText"
      >
        Body
      </label>
      <textarea
        className="emotion-45 form-control"
        id="formControlsMessageBodyText"
        onChange={[Function]}
        placeholder="Enter message body"
        type={undefined}
        value=""
      />
    </div>
  </form>
  <form>
    <button
      className="btn btn-default"
      disabled={false}
      id="submitButton"
      onClick={[Function]}
      type="button"
    >
      Submit
    </button>
    <button
      className="btn btn-danger"
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Reset Fields
    </button>
  </form>
</div>
`;

exports[`renders correctly from a predefined message 1`] = `
.emotion-59 {
  margin-left: 5px;
  margin-right: 5px;
  padding-top: 1%;
  width: calc(100% - 10px);
  float: left;
}

.emotion-2 {
  float: left;
  width: 20px;
  position: relative;
  top: 9px;
}

.emotion-4 {
  float: left;
  width: 75px;
}

.emotion-16 {
  float: left;
  width: 275px;
  text-align: left;
}

.emotion-37 {
  width: 270px;
  margin-left: 5px;
}

.emotion-0 {
  font-weight: bold;
  margin-left: 5px;
}

.emotion-1 {
  text-align: left;
}

.emotion-57 {
  min-height: 350px;
  padding-left: 5px;
}

.emotion-6 {
  line-height: 38px;
}

.emotion-17 {
  float: left;
  width: 100%;
}

.emotion-38 {
  opacity: 0.5;
}

.emotion-38:hover {
  cursor: progress;
}

.emotion-15 {
  position: relative;
  box-sizing: border-box;
}

.emotion-14 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,98%);
  border-color: hsl(0,0%,80%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-14:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 2px 8px;
  -webkit-overflow-scrolling: touch;
  position: relative;
  box-sizing: border-box;
}

.emotion-23 {
  color: hsl(0,0%,50%);
  margin-left: 2px;
  margin-right: 2px;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-8 {
  margin: 2px;
  padding-bottom: 2px;
  padding-top: 2px;
  visibility: visible;
  color: #222;
  box-sizing: border-box;
}

.emotion-13 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  box-sizing: border-box;
}

.emotion-10 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,80%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-12 {
  color: hsl(0,0%,80%);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 8px;
  -webkit-transition: color 150ms;
  transition: color 150ms;
  box-sizing: border-box;
}

.emotion-12:hover {
  color: hsl(0,0%,60%);
}

.emotion-11 {
  display: inline-block;
  fill: currentColor;
  line-height: 1;
  stroke: currentColor;
  stroke-width: 0;
}

.emotion-31 {
  pointer-events: none;
  position: relative;
  box-sizing: border-box;
}

.emotion-30 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: hsl(0,0%,95%);
  border-color: hsl(0,0%,90%);
  border-radius: 4px;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  min-height: 38px;
  outline: 0 !important;
  position: relative;
  -webkit-transition: all 100ms;
  transition: all 100ms;
  box-sizing: border-box;
}

.emotion-30:hover {
  border-color: hsl(0,0%,70%);
}

.emotion-26 {
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  background-color: hsl(0,0%,90%);
  margin-bottom: 8px;
  margin-top: 8px;
  width: 1px;
  box-sizing: border-box;
}

.emotion-7 {
  color: #222;
  margin-left: 2px;
  margin-right: 2px;
  max-width: calc(100% - 8px);
  overflow: hidden;
  position: absolute;
  text-overflow: ellipsis;
  white-space: nowrap;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  box-sizing: border-box;
}

.emotion-43 {
  padding-left: 5px;
  width: 20%;
  float: left;
}

.emotion-45 {
  padding-left: 5px;
  width: calc(80% - 80px);
  float: left;
}

.emotion-47 {
  padding-left: 5px;
  width: 80px;
  float: left;
}

.emotion-42 {
  min-height: 38px;
}

<div
  className="emotion-59"
>
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      Destination
    </p>
  </div>
  <div
    className="emotion-17"
  >
    <div
      onClick={[Function]}
    >
      <input
        checked={true}
        className="emotion-2"
        id="queue-selection-radio"
        onChange={[Function]}
        type="radio"
        value="queue"
      />
      <div
        className="emotion-1 emotion-4 emotion-0 emotion-6"
      >
        <p>
          Queue
        </p>
      </div>
    </div>
    <div
      className="emotion-15 emotion-16"
      id="queue-dropdown"
      onKeyDown={[Function]}
    >
      <div
        className="emotion-14"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className="emotion-9"
        >
          <div
            className="emotion-7"
          >
            demoqueue1
          </div>
          <div
            className="emotion-8"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                aria-label={undefined}
                aria-labelledby={undefined}
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                className={undefined}
                disabled={false}
                id="react-select-4-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className="emotion-13"
        >
          <span
            className="emotion-10"
          />
          <div
            aria-hidden="true"
            className="emotion-12"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              aria-hidden="true"
              className="emotion-11"
              focusable="false"
              height={20}
              viewBox="0 0 20 20"
              width={20}
            >
              <path
                d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="emotion-17"
  >
    <div
      onClick={[Function]}
    >
      <input
        checked={false}
        className="emotion-2"
        id="topic-selection-radio"
        onChange={[Function]}
        type="radio"
        value="topic"
      />
      <div
        className="emotion-1 emotion-4 emotion-0 emotion-6"
      >
        <p>
          Topic
        </p>
      </div>
    </div>
    <div
      className="emotion-31 emotion-16"
      id="topic-dropdown"
      onKeyDown={[Function]}
    >
      <div
        className="emotion-30"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className="emotion-9"
        >
          <div
            className="emotion-23"
          >
            Select...
          </div>
          <div
            className="emotion-8"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                aria-label={undefined}
                aria-labelledby={undefined}
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                className={undefined}
                disabled={true}
                id="react-select-5-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className="emotion-13"
        >
          <span
            className="emotion-26"
          />
          <div
            aria-hidden="true"
            className="emotion-12"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              aria-hidden="true"
              className="emotion-11"
              focusable="false"
              height={20}
              viewBox="0 0 20 20"
              width={20}
            >
              <path
                d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  <hr
    className="emotion-17"
  />
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      Pre-defined Properties
    </p>
  </div>
  <div />
  <form>
    <div
      className="emotion-1"
    >
      <button
        className="emotion-37 emotion-38 btn btn-default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Loading pre-defined properties...
      </button>
    </div>
  </form>
  <hr />
  <div
    className="emotion-1"
  >
    <p
      className="emotion-0"
    >
      User-defined Properties
    </p>
  </div>
  <div>
    <div>
      <form
        className="emotion-43"
        onSubmit={[Function]}
      >
        <div
          className="form-group"
        >
          <input
            className="emotion-42 form-control"
            id="formControlsText"
            onChange={[Function]}
            placeholder="Enter property name"
            type="text"
            value="userDefinedProp1"
          />
        </div>
      </form>
      <form
        className="emotion-45"
        onSubmit={[Function]}
      >
        <div
          className="form-group"
        >
          <input
            className="emotion-42 form-control"
            id="formControlsText"
            onChange={[Function]}
            placeholder="Enter property value"
            type="text"
            value="value1"
          />
        </div>
      </form>
      <div
        className="emotion-47"
      >
        <button
          className="emotion-42 btn btn-danger"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          Delete
        </button>
      </div>
    </div>
    <div>
      <form
        className="emotion-43"
        onSubmit={[Function]}
      >
        <div
          className="form-group"
        >
          <input
            className="emotion-42 form-control"
            id="formControlsText"
            onChange={[Function]}
            placeholder="Enter property name"
            type="text"
            value="userDefinedProp2"
          />
        </div>
      </form>
      <form
        className="emotion-45"
        onSubmit={[Function]}
      >
        <div
          className="form-group"
        >
          <input
            className="emotion-42 form-control"
            id="formControlsText"
            onChange={[Function]}
            placeholder="Enter property value"
            type="text"
            value="value2"
          />
        </div>
      </form>
      <div
        className="emotion-47"
      >
        <button
          className="emotion-42 btn btn-danger"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          Delete
        </button>
      </div>
    </div>
  </div>
  <form>
    <div
      className="emotion-1"
    >
      <button
        className="emotion-37 btn btn-default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Add new application specific property
      </button>
    </div>
  </form>
  <hr />
  <form>
    <div
      className="emotion-1 form-group"
    >
      <label
        className="emotion-0 control-label"
        htmlFor="formControlsMessageBodyText"
      >
        Body
      </label>
      <textarea
        className="emotion-57 form-control"
        id="formControlsMessageBodyText"
        onChange={[Function]}
        placeholder="Enter message body"
        type={undefined}
        value="Hello world!"
      />
    </div>
  </form>
  <form>
    <button
      className="btn btn-default"
      disabled={false}
      id="submitButton"
      onClick={[Function]}
      type="button"
    >
      Submit
    </button>
    <button
      className="btn btn-danger"
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Reset Fields
    </button>
  </form>
</div>
`;
